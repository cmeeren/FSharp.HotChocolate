schema {
  query: Query
}

type A {
  x: Int!
}

type B {
  y: String!
}

type MyAssemblySkippedType {
  int: Int!
  string: String
}

type MyCSharpType {
  cSharpDefinedInt: Int!
  cSharpDefinedNullableInt: Int
  cSharpDefinedString: String!
  cSharpDefinedNullableString: String
  pagedString("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypePagedStringConnection
  pagedNullableString("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypePagedNullableStringConnection
  pagedMyCSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypePagedMyCSharpTypeConnection
  pagedNullableMyCSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypePagedNullableMyCSharpTypeConnection
  pagedMyFSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypePagedMyFSharpTypeConnection
  pagedNullableMyFSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypePagedNullableMyFSharpTypeConnection
  customPagedString("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypeCustomPagedStringConnection
  customPagedNullableString("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypeCustomPagedNullableStringConnection
  customPagedMyCSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypeCustomPagedMyCSharpTypeConnection
  customPagedNullableMyCSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypeCustomPagedNullableMyCSharpTypeConnection
  customPagedMyFSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypeCustomPagedMyFSharpTypeConnection
  customPagedNullableMyFSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyCSharpTypeCustomPagedNullableMyFSharpTypeConnection
  cSharpDefinedExtensionInt: Int!
  cSharpDefinedExtensionNullableInt: Int
  cSharpDefinedExtensionString: String!
  cSharpDefinedExtensionNullableString: String
  fSharpDefinedExtensionInt: Int!
  fSharpDefinedExtensionOptionOfInt: Int
  fSharpDefinedExtensionString: String!
  fSharpDefinedExtensionOptionOfString: String
}

"A connection to a list of items."
type MyCSharpTypeCustomPagedMyCSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypeCustomPagedMyCSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyCSharpType!]
}

"An edge in a connection."
type MyCSharpTypeCustomPagedMyCSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyCSharpType!
}

"A connection to a list of items."
type MyCSharpTypeCustomPagedMyFSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypeCustomPagedMyFSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyFSharpType!]
}

"An edge in a connection."
type MyCSharpTypeCustomPagedMyFSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyFSharpType!
}

"A connection to a list of items."
type MyCSharpTypeCustomPagedNullableMyCSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypeCustomPagedNullableMyCSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyCSharpType]
}

"An edge in a connection."
type MyCSharpTypeCustomPagedNullableMyCSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyCSharpType
}

"A connection to a list of items."
type MyCSharpTypeCustomPagedNullableMyFSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypeCustomPagedNullableMyFSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyFSharpType]
}

"An edge in a connection."
type MyCSharpTypeCustomPagedNullableMyFSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyFSharpType
}

"A connection to a list of items."
type MyCSharpTypeCustomPagedNullableStringConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypeCustomPagedNullableStringEdge!]
  "A flattened list of the nodes."
  nodes: [String]
}

"An edge in a connection."
type MyCSharpTypeCustomPagedNullableStringEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String
}

"A connection to a list of items."
type MyCSharpTypeCustomPagedStringConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypeCustomPagedStringEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type MyCSharpTypeCustomPagedStringEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

"A connection to a list of items."
type MyCSharpTypePagedMyCSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypePagedMyCSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyCSharpType!]
}

"An edge in a connection."
type MyCSharpTypePagedMyCSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyCSharpType!
}

"A connection to a list of items."
type MyCSharpTypePagedMyFSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypePagedMyFSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyFSharpType!]
}

"An edge in a connection."
type MyCSharpTypePagedMyFSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyFSharpType!
}

"A connection to a list of items."
type MyCSharpTypePagedNullableMyCSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypePagedNullableMyCSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyCSharpType]
}

"An edge in a connection."
type MyCSharpTypePagedNullableMyCSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyCSharpType
}

"A connection to a list of items."
type MyCSharpTypePagedNullableMyFSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypePagedNullableMyFSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyFSharpType]
}

"An edge in a connection."
type MyCSharpTypePagedNullableMyFSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyFSharpType
}

"A connection to a list of items."
type MyCSharpTypePagedNullableStringConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypePagedNullableStringEdge!]
  "A flattened list of the nodes."
  nodes: [String]
}

"An edge in a connection."
type MyCSharpTypePagedNullableStringEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String
}

"A connection to a list of items."
type MyCSharpTypePagedStringConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCSharpTypePagedStringEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type MyCSharpTypePagedStringEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

type MyFSharpType {
  fSharpDefinedInt: Int!
  fSharpDefinedOptionOfInt: Int
  fSharpDefinedString: String!
  fSharpDefinedOptionOfString: String
  cSharpDefinedExtensionInt: Int!
  cSharpDefinedExtensionNullableInt: Int
  cSharpDefinedExtensionString: String!
  cSharpDefinedExtensionNullableString: String
  pagedString("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypePagedStringConnection
  pagedTaskOfString("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypePagedTaskOfStringConnection
  pagedOptionOfString("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypePagedOptionOfStringConnection
  pagedMyCSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypePagedMyCSharpTypeConnection
  pagedOptionOfMyCSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypePagedOptionOfMyCSharpTypeConnection
  pagedMyFSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypePagedMyFSharpTypeConnection
  pagedOptionOfMyFSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypePagedOptionOfMyFSharpTypeConnection
  customPagedString("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypeCustomPagedStringConnection
  customPagedTaskOfString("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypeCustomPagedTaskOfStringConnection
  customPagedOptionOfString("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypeCustomPagedOptionOfStringConnection
  customPagedMyCSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypeCustomPagedMyCSharpTypeConnection
  customPagedOptionOfMyCSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypeCustomPagedOptionOfMyCSharpTypeConnection
  customPagedMyFSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypeCustomPagedMyFSharpTypeConnection
  customPagedOptionOfMyFSharpType("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): MyFSharpTypeCustomPagedOptionOfMyFSharpTypeConnection
  intWithSkippedFSharpNullability(x: Int!): Int!
  stringWithSkippedFSharpNullability(x: String): String
}

"A connection to a list of items."
type MyFSharpTypeCustomPagedMyCSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypeCustomPagedMyCSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyCSharpType!]
}

"An edge in a connection."
type MyFSharpTypeCustomPagedMyCSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyCSharpType!
}

"A connection to a list of items."
type MyFSharpTypeCustomPagedMyFSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypeCustomPagedMyFSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyFSharpType!]
}

"An edge in a connection."
type MyFSharpTypeCustomPagedMyFSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyFSharpType!
}

"A connection to a list of items."
type MyFSharpTypeCustomPagedOptionOfMyCSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypeCustomPagedOptionOfMyCSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyCSharpType]
}

"An edge in a connection."
type MyFSharpTypeCustomPagedOptionOfMyCSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyCSharpType
}

"A connection to a list of items."
type MyFSharpTypeCustomPagedOptionOfMyFSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypeCustomPagedOptionOfMyFSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyFSharpType]
}

"An edge in a connection."
type MyFSharpTypeCustomPagedOptionOfMyFSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyFSharpType
}

"A connection to a list of items."
type MyFSharpTypeCustomPagedOptionOfStringConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypeCustomPagedOptionOfStringEdge!]
  "A flattened list of the nodes."
  nodes: [String]
}

"An edge in a connection."
type MyFSharpTypeCustomPagedOptionOfStringEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String
}

"A connection to a list of items."
type MyFSharpTypeCustomPagedStringConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypeCustomPagedStringEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type MyFSharpTypeCustomPagedStringEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

"A connection to a list of items."
type MyFSharpTypeCustomPagedTaskOfStringConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypeCustomPagedTaskOfStringEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type MyFSharpTypeCustomPagedTaskOfStringEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

"A connection to a list of items."
type MyFSharpTypePagedMyCSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypePagedMyCSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyCSharpType!]
}

"An edge in a connection."
type MyFSharpTypePagedMyCSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyCSharpType!
}

"A connection to a list of items."
type MyFSharpTypePagedMyFSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypePagedMyFSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyFSharpType!]
}

"An edge in a connection."
type MyFSharpTypePagedMyFSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyFSharpType!
}

"A connection to a list of items."
type MyFSharpTypePagedOptionOfMyCSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypePagedOptionOfMyCSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyCSharpType]
}

"An edge in a connection."
type MyFSharpTypePagedOptionOfMyCSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyCSharpType
}

"A connection to a list of items."
type MyFSharpTypePagedOptionOfMyFSharpTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypePagedOptionOfMyFSharpTypeEdge!]
  "A flattened list of the nodes."
  nodes: [MyFSharpType]
}

"An edge in a connection."
type MyFSharpTypePagedOptionOfMyFSharpTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MyFSharpType
}

"A connection to a list of items."
type MyFSharpTypePagedOptionOfStringConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypePagedOptionOfStringEdge!]
  "A flattened list of the nodes."
  nodes: [String]
}

"An edge in a connection."
type MyFSharpTypePagedOptionOfStringEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String
}

"A connection to a list of items."
type MyFSharpTypePagedStringConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypePagedStringEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type MyFSharpTypePagedStringEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

"A connection to a list of items."
type MyFSharpTypePagedTaskOfStringConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyFSharpTypePagedTaskOfStringEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type MyFSharpTypePagedTaskOfStringEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

type MyFSharpTypeWithSkippedNullability {
  int: Int!
  string: String
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"A connection to a list of items."
type PagingWithExplicitMiddlewareParamsAndExtraConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PagingWithExplicitMiddlewareParamsAndExtraEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type PagingWithExplicitMiddlewareParamsAndExtraEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

"A connection to a list of items."
type PagingWithExplicitMiddlewareParamsOptionalAndExtraConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PagingWithExplicitMiddlewareParamsOptionalAndExtraEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type PagingWithExplicitMiddlewareParamsOptionalAndExtraEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

"A connection to a list of items."
type PagingWithExtraParamsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PagingWithExtraParamsEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type PagingWithExtraParamsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

"A connection to a list of items."
type PagingWithSeqConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PagingWithSeqEdge!]
  "A flattened list of the nodes."
  nodes: [String!]
}

"An edge in a connection."
type PagingWithSeqEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: String!
}

type Query {
  floatInp(x: RecFloatInput!): RecFloat!
  floatParam(x: Float!): Float!
  taskOfFloatParam(x: Float!): Float!
  valueTaskOfFloatParam(x: Float!): Float!
  asyncOfFloatParam(x: Float!): Float!
  stringInp(x: RecStringInput!): RecString!
  stringParam(x: String!): String!
  stringAsIdInp(x: RecStringAsIdInput!): RecStringAsId!
  stringAsIdParam(x: ID!): ID!
  recInp(x: RecRecInput!): RecRec!
  recParam(x: RecFloatInput!): RecFloat!
  optionOfFloatInp(x: RecOptionOfFloatInput!): RecOptionOfFloat!
  optionOfFloatParam(x: Float): Float
  taskOfOptionOfFloatParam(x: Float): Float
  valueTaskOfOptionOfFloatParam(x: Float): Float
  asyncOfOptionOfFloatParam(x: Float): Float
  optionOfStringInp(x: RecOptionOfStringInput!): RecOptionOfString!
  optionOfStringParam(x: String): String
  optionOfStringAsIdInp(x: RecOptionOfStringAsIdInput!): RecOptionOfStringAsId!
  optionOfStringAsIdParam(x: ID): ID
  optionOfRecInp(x: RecOptionOfRecInput!): RecOptionOfRec!
  optionOfRecParam(x: RecFloatInput): RecFloat
  arrayOfFloatInp(x: RecArrayOfFloatInput!): RecArrayOfFloat!
  arrayOfFloatParam(x: [Float!]!): [Float!]!
  arrayOfStringInp(x: RecArrayOfStringInput!): RecArrayOfString!
  arrayOfStringParam(x: [String!]!): [String!]!
  arrayOfStringAsIdInp(x: RecArrayOfStringAsIdInput!): RecArrayOfStringAsId!
  arrayOfStringAsIdParam(x: [ID!]!): [ID!]!
  arrayOfRecInp(x: RecArrayOfRecInput!): RecArrayOfRec!
  arrayOfRecParam(x: [RecFloatInput!]!): [RecFloat!]!
  seqOfStringInp(x: RecSeqOfStringInput!): RecSeqOfString!
  seqOfStringParam(x: [String!]!): [String!]!
  arrayOfOptionOfFloatInp(x: RecArrayOfOptionOfFloatInput!): RecArrayOfOptionOfFloat!
  arrayOfOptionOfFloatParam(x: [Float]!): [Float]!
  arrayOfOptionOfStringInp(x: RecArrayOfOptionOfStringInput!): RecArrayOfOptionOfString!
  arrayOfOptionOfStringParam(x: [String]!): [String]!
  arrayOfOptionOfStringAsIdInp(x: RecArrayOfOptionOfStringAsIdInput!): RecArrayOfOptionOfStringAsId!
  arrayOfOptionOfStringAsIdParam(x: [ID]!): [ID]!
  arrayOfOptionOfRecInp(x: RecArrayOfOptionOfRecInput!): RecArrayOfOptionOfRec!
  arrayOfOptionOfRecParam(x: [RecFloatInput]!): [RecFloat]!
  optionOfArrayOfFloatInp(x: RecOptionOfArrayOfFloatInput!): RecOptionOfArrayOfFloat!
  optionOfArrayOfFloatParam(x: [Float!]): [Float!]
  optionOfArrayOfOptionOfFloatInp(x: RecOptionOfArrayOfOptionOfFloatInput!): RecOptionOfArrayOfOptionOfFloat!
  optionOfArrayOfOptionOfFloatParam(x: [Float]): [Float]
  taskOfOptionOfArrayOfOptionOfFloatParam(x: [Float]): [Float]
  valueTaskOfOptionOfArrayOfOptionOfFloatParam(x: [Float]): [Float]
  asyncOfOptionOfArrayOfOptionOfFloatParam(x: [Float]): [Float]
  resizeArrayOfFloatInp(x: RecResizeArrayOfFloatInput!): RecResizeArrayOfFloat!
  resizeArrayOfFloatParam(x: [Float!]!): [Float!]!
  resizeArrayOfOptionOfFloatInp(x: RecResizeArrayOfOptionOfFloatInput!): RecResizeArrayOfOptionOfFloat!
  resizeArrayOfOptionOfFloatParam(x: [Float]!): [Float]!
  optionOfResizeArrayOfFloatInp(x: RecOptionOfResizeArrayOfFloatInput!): RecOptionOfResizeArrayOfFloat!
  optionOfResizeArrayOfFloatParam(x: [Float!]): [Float!]
  optionOfResizeArrayOfOptionOfFloatInp(x: RecOptionOfResizeArrayOfOptionOfFloatInput!): RecOptionOfResizeArrayOfOptionOfFloat!
  optionOfResizeArrayOfOptionOfFloatParam(x: [Float]): [Float]
  arrayOfArrayOfFloatInp(x: RecArrayOfArrayOfFloatInput!): RecArrayOfArrayOfFloat!
  arrayOfArrayOfFloatParam(x: [[Float!]!]!): [[Float!]!]!
  arrayOfArrayOfOptionOfFloatInp(x: RecArrayOfArrayOfOptionOfFloatInput!): RecArrayOfArrayOfOptionOfFloat!
  arrayOfArrayOfOptionOfFloatParam(x: [[Float]!]!): [[Float]!]!
  arrayOfOptionOfArrayOfFloatInp(x: RecArrayOfOptionOfArrayOfFloatInput!): RecArrayOfOptionOfArrayOfFloat!
  arrayOfOptionOfArrayOfFloatParam(x: [[Float!]]!): [[Float!]]!
  arrayOfOptionOfArrayOfStringInp(x: RecArrayOfOptionOfArrayOfStringInput!): RecArrayOfOptionOfArrayOfString!
  arrayOfOptionOfArrayOfStringParam(x: [[String!]]!): [[String!]]!
  optionOfArrayOfArrayOfFloatInp(x: RecOptionOfArrayOfArrayOfFloatInput!): RecOptionOfArrayOfArrayOfFloat!
  optionOfArrayOfArrayOfFloatParam(x: [[Float!]!]): [[Float!]!]
  decimalAsFloatInp(x: RecDecimalAsFloatInput!): RecDecimalAsFloat!
  decimalAsFloatParam(x: Float!): Float!
  optionOfDecimalAsFloatInp(x: RecOptionOfDecimalAsFloatInput!): RecOptionOfDecimalAsFloat!
  optionOfDecimalAsFloatParam(x: Float): Float
  arrayOfDecimalAsFloatInp(x: RecArrayOfDecimalAsFloatInput!): RecArrayOfDecimalAsFloat!
  arrayOfDecimalAsFloatParam(x: [Float!]!): [Float!]!
  arrayOfOptionOfDecimalAsFloatInp(x: RecArrayOfOptionOfDecimalAsFloatInput!): RecArrayOfOptionOfDecimalAsFloat!
  arrayOfOptionOfDecimalAsFloatParam(x: [Float]!): [Float]!
  uriAsBoundStringInp(x: RecUriAsBoundStringInput!): RecUriAsBoundString!
  uriAsBoundStringParam(x: String!): String!
  optionOfUriAsBoundStringInp(x: RecOptionOfUriAsBoundStringInput!): RecOptionOfUriAsBoundString!
  optionOfUriAsBoundStringParam(x: String): String
  arrayOfUriAsBoundStringInp(x: RecArrayOfUriAsBoundStringInput!): RecArrayOfUriAsBoundString!
  arrayOfUriAsBoundStringParam(x: [String!]!): [String!]!
  arrayOfOptionOfUriAsBoundStringInp(x: RecArrayOfOptionOfUriAsBoundStringInput!): RecArrayOfOptionOfUriAsBoundString!
  arrayOfOptionOfUriAsBoundStringParam(x: [String]!): [String]!
  union: MyUnion!
  optionOfUnion(returnNull: Boolean!): MyUnion
  arrayOfUnion: [MyUnion!]!
  arrayOfOptionOfUnion(returnNull: Boolean!): [MyUnion]!
  arrayOfOptionOfArrayOfOptionOfUnion(returnOuterNull: Boolean! returnInnerNull: Boolean!): [[MyUnion]]!
  myAssemblySkippedType(x: MyAssemblySkippedTypeInput!): MyAssemblySkippedType!
  myFSharpTypeWithSkippedNullability(x: MyFSharpTypeWithSkippedNullabilityInput!): MyFSharpTypeWithSkippedNullability!
  intFieldWithSkippedNullability(x: Int!): Int!
  stringFieldWithSkippedNullability(x: String): String
  fieldWithParamsWithSkippedNullability(int: Int! string: String! stringWithSkippedFSharpNullability: String): String!
  pagingWithExtraParams(int: Int! string: String! stringOfOption: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): PagingWithExtraParamsConnection
  pagingWithExplicitMiddlewareParamsAndExtra("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String int: Int! string: String! stringOfOption: String): PagingWithExplicitMiddlewareParamsAndExtraConnection
  pagingWithExplicitMiddlewareParamsOptionalAndExtra("Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String "Returns the elements in the list that come after the specified cursor." after: String int: Int! string: String! stringOfOption: String): PagingWithExplicitMiddlewareParamsOptionalAndExtraConnection
  pagingWithSeq("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): PagingWithSeqConnection
  cSharpType: MyCSharpType!
  fSharpType: MyFSharpType!
}

type RecArrayOfArrayOfFloat {
  x: [[Float!]!]!
}

type RecArrayOfArrayOfOptionOfFloat {
  x: [[Float]!]!
}

type RecArrayOfDecimalAsFloat {
  x: [Float!]!
}

type RecArrayOfFloat {
  x: [Float!]!
}

type RecArrayOfOptionOfArrayOfFloat {
  x: [[Float!]]!
}

type RecArrayOfOptionOfArrayOfString {
  x: [[String!]]!
}

type RecArrayOfOptionOfDecimalAsFloat {
  x: [Float]!
}

type RecArrayOfOptionOfFloat {
  x: [Float]!
}

type RecArrayOfOptionOfRec {
  x: [RecFloat]!
}

type RecArrayOfOptionOfString {
  x: [String]!
}

type RecArrayOfOptionOfStringAsId {
  x: [ID]!
}

type RecArrayOfOptionOfUriAsBoundString {
  x: [String]!
}

type RecArrayOfRec {
  x: [RecFloat!]!
}

type RecArrayOfString {
  x: [String!]!
}

type RecArrayOfStringAsId {
  x: [ID!]!
}

type RecArrayOfUriAsBoundString {
  x: [String!]!
}

type RecDecimalAsFloat {
  x: Float!
}

type RecFloat {
  x: Float!
}

type RecOptionOfArrayOfArrayOfFloat {
  x: [[Float!]!]
}

type RecOptionOfArrayOfFloat {
  x: [Float!]
}

type RecOptionOfArrayOfOptionOfFloat {
  x: [Float]
}

type RecOptionOfDecimalAsFloat {
  x: Float
}

type RecOptionOfFloat {
  x: Float
}

type RecOptionOfRec {
  x: RecFloat
}

type RecOptionOfResizeArrayOfFloat {
  x: [Float!]
}

type RecOptionOfResizeArrayOfOptionOfFloat {
  x: [Float]
}

type RecOptionOfString {
  x: String
}

type RecOptionOfStringAsId {
  x: ID
}

type RecOptionOfUriAsBoundString {
  x: String
}

type RecRec {
  x: RecFloat!
}

type RecResizeArrayOfFloat {
  x: [Float!]!
}

type RecResizeArrayOfOptionOfFloat {
  x: [Float]!
}

type RecSeqOfString {
  x: [String!]!
}

type RecString {
  x: String!
}

type RecStringAsId {
  x: ID!
}

type RecUriAsBoundString {
  x: String!
}

union MyUnion = A | B

input MyAssemblySkippedTypeInput {
  int: Int!
  string: String
}

input MyFSharpTypeWithSkippedNullabilityInput {
  int: Int!
  string: String
}

input RecArrayOfArrayOfFloatInput {
  x: [[Float!]!]!
}

input RecArrayOfArrayOfOptionOfFloatInput {
  x: [[Float]!]!
}

input RecArrayOfDecimalAsFloatInput {
  x: [Float!]!
}

input RecArrayOfFloatInput {
  x: [Float!]!
}

input RecArrayOfOptionOfArrayOfFloatInput {
  x: [[Float!]]!
}

input RecArrayOfOptionOfArrayOfStringInput {
  x: [[String!]]!
}

input RecArrayOfOptionOfDecimalAsFloatInput {
  x: [Float]!
}

input RecArrayOfOptionOfFloatInput {
  x: [Float]!
}

input RecArrayOfOptionOfRecInput {
  x: [RecFloatInput]!
}

input RecArrayOfOptionOfStringAsIdInput {
  x: [ID]!
}

input RecArrayOfOptionOfStringInput {
  x: [String]!
}

input RecArrayOfOptionOfUriAsBoundStringInput {
  x: [String]!
}

input RecArrayOfRecInput {
  x: [RecFloatInput!]!
}

input RecArrayOfStringAsIdInput {
  x: [ID!]!
}

input RecArrayOfStringInput {
  x: [String!]!
}

input RecArrayOfUriAsBoundStringInput {
  x: [String!]!
}

input RecDecimalAsFloatInput {
  x: Float!
}

input RecFloatInput {
  x: Float!
}

input RecOptionOfArrayOfArrayOfFloatInput {
  x: [[Float!]!]
}

input RecOptionOfArrayOfFloatInput {
  x: [Float!]
}

input RecOptionOfArrayOfOptionOfFloatInput {
  x: [Float]
}

input RecOptionOfDecimalAsFloatInput {
  x: Float
}

input RecOptionOfFloatInput {
  x: Float
}

input RecOptionOfRecInput {
  x: RecFloatInput
}

input RecOptionOfResizeArrayOfFloatInput {
  x: [Float!]
}

input RecOptionOfResizeArrayOfOptionOfFloatInput {
  x: [Float]
}

input RecOptionOfStringAsIdInput {
  x: ID
}

input RecOptionOfStringInput {
  x: String
}

input RecOptionOfUriAsBoundStringInput {
  x: String
}

input RecRecInput {
  x: RecFloatInput!
}

input RecResizeArrayOfFloatInput {
  x: [Float!]!
}

input RecResizeArrayOfOptionOfFloatInput {
  x: [Float]!
}

input RecSeqOfStringInput {
  x: [String!]!
}

input RecStringAsIdInput {
  x: ID!
}

input RecStringInput {
  x: String!
}

input RecUriAsBoundStringInput {
  x: String!
}